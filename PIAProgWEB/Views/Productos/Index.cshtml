@model IEnumerable<PIAProgWEB.Models.dbModels.Producto>

@{
    ViewData["Title"] = "Index";
}

<style>
    body {
        font-family: 'Arial', sans-serif;
        background-color: #f4f4f4;
        margin: 0;
        padding: 0;
    }

    h1 {
        color: #333;
    }

    .container {
        display: flex;
        margin: 20px;
    }

    #subcategories {
        list-style-type: none;
        padding: 0;
        margin: 0;
        background-color: #fff;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

        #subcategories li {
            padding: 10px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

            #subcategories li:hover {
                background-color: #f0f0f0;
            }

    table {
        width: 100%;
        background-color: #fff;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    th, td {
        padding: 15px;
        text-align: left;
    }

    th {
        background-color: #f8f8f8;
    }

    tr:nth-child(even) {
        background-color: #f9f9f9;
    }

    img {
        max-width: 200px;
        max-height: 200px;
        border-radius: 5px;
    }

    .action-buttons a {
        display: inline-block;
        margin-right: 10px;
        padding: 8px 15px; /* Adjusted padding */
        font-size: 14px; /* Adjusted font size */
        text-decoration: none;
        color: #fff;
        border-radius: 5px;
        transition: background-color 0.3s;
    }

    .add-to-cart-button,
    .add-to-favorites-button {
        display: inline-block;
        padding: 8px 15px;
        font-size: 14px;
        text-decoration: none;
        color: #fff;
        border-radius: 5px;
        transition: background-color 0.3s;
    }

    .add-to-cart-button {
        background-color: #28a745; /* Green color for add to cart button */
        border: 1px solid #218838;
    }

    .add-to-favorites-button {
        background-color: #007bff; /* Blue color for add to favorites button */
        border: 1px solid #0056b3;
    }

    .add-to-cart-button:hover {
        background-color: #218838; /* Darker green on hover */
    }

    .add-to-favorites-button:hover {
        background-color: #0056b3; /* Darker blue on hover */
    }
</style>

<div class="container">

    <!-- Container for subcategories -->
    <div style="width: 20%; padding-right: 20px;">
        <h4>Subcategories</h4>
        <ul id="subcategories">
            @foreach (var subcategory in Model.Select(p => p.SubCategoria.NombreSubcategoria).Distinct())
            {
                <li onclick="filterProducts('@subcategory')">@subcategory</li>
            }
        </ul>
    </div>

    <!-- Table for products -->
    <div style="width: 80%;">
        @if (User.IsInRole("Admin"))
        {
            <p class="action-buttons">
                <a asp-action="Create" class="btn btn-primary">Agregar Producto</a>
            </p>
            <p class="action-buttons">
                <a asp-action="Index" asp-controller="Subcategorias" class="btn btn-primary">Agregar Subcategorias</a>
            </p>
        }
        <table>
            <!-- Table headers -->
            <thead>
                <tr>
                    <th>@Html.DisplayNameFor(model => model.NombreProducto)</th>
                    <th>@Html.DisplayNameFor(model => model.Descripción)</th>
                    <th>@Html.DisplayNameFor(model => model.Precio)</th>
                    <th>@Html.DisplayNameFor(model => model.Imagen)</th>
                    <th>@Html.DisplayNameFor(model => model.SubCategoria)</th>
                    <th></th>
                </tr>
            </thead>

            <!-- Table body -->
            <tbody>
                @foreach (var item in Model)
                {
                    <tr data-subcategory="@item.SubCategoria.NombreSubcategoria">
                        <td>@Html.DisplayFor(modelItem => item.NombreProducto)</td>
                        <td>@Html.DisplayFor(modelItem => item.Descripción)</td>
                        <td>@Html.DisplayFor(modelItem => item.Precio)</td>
                        <td><img src="@Html.DisplayFor(modelItem => item.Imagen)" /></td>
                        <td>@Html.DisplayFor(modelItem => item.SubCategoria.NombreSubcategoria)</td>
                        <td>
                            @if (User.IsInRole("Admin"))
                            {
                                <p class="action-buttons">
                                    <a asp-action="Edit" asp-route-id="@item.ProductoId" class="btn btn-warning">Edit</a>
                                    <a asp-action="Details" asp-route-id="@item.ProductoId" class="btn btn-info">Details</a>
                                    <a asp-action="Delete" asp-route-id="@item.ProductoId" class="btn btn-danger">Delete</a>
                                </p>
                            }
                            else
                            {
                                <div>
                                    <label for="selectedSize">Talla:</label>
                                    <select name="selectedSize" class="size-dropdown">
                                        @foreach (var talla in item.ProductoTallas)
                                        {
                                            <option value="@talla.Talla.Tamaño" data-available-quantity="@talla.Cantidad">@talla.Talla.Tamaño</option>
                                        }
                                    </select>
                                </div>

                                <div>
                                    <label for="selectedQuantity">Cantidad:</label>
                                    <select name="selectedQuantity" class="quantity-dropdown">
                                        @for (int i = 1; i <= item.ProductoTallas.Min(t => t.Cantidad); i++)
                                        {
                                            <option value="@i">@i</option>
                                        }
                                    </select>
                                </div>

                                <button class="add-to-cart-button"
                                data-product-id="@item.ProductoId"
                                data-available-quantities="@Html.Raw(Json.Serialize(item.ProductoTallas.ToDictionary(t => t.Talla.Tamaño, t => t.Cantidad)))">
                                    Add to Cart
                                </button>

                                <a href="#" class="add-to-favorites-button">Add to Favorites</a>
                            }

                        </td>
                    </tr>
                }
            </tbody>
        </table>

        @if (User.IsInRole("Admin"))
        {
            <!-- Button for Admin to redirect to ProductoTallas -->
            <p class="action-buttons">
                <a asp-action="Index" asp-controller="ProductoTallas" class="btn btn-primary">Asignar Tallas</a>
            </p>
        }
    </div>
</div>

@section scripts {
    <!-- Load jQuery before using it -->
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>

    <!-- Existing script for filtering products -->
    <script>
        function filterProducts(subcategory) {
            // Hide all rows
            $('table tbody tr').hide();

            // Show rows with the selected subcategory
            $('table tbody tr[data-subcategory="' + subcategory + '"]').show();
        }
    </script>

    <!-- Updated script for handling "Add to Cart" button with dynamic availability -->
    <script>
        $(document).ready(function () {
            $('.add-to-cart-button').on('click', function () {
                var productId = $(this).data('product-id');
                var currentRow = $(this).closest('tr');
                var selectedSize = currentRow.find('select[name="selectedSize"]');
                var selectedQuantity = parseFloat(currentRow.find('select[name="selectedQuantity"]').val());

                // Obtener la cantidad disponible para la talla seleccionada
                var availableQuantities = currentRow.find('select[name="selectedSize"] option')
                    .map(function () { return { size: $(this).val(), quantity: $(this).data('available-quantity') }; })
                    .get();

                // Ajustar el máximo de la cantidad al disponible para la talla seleccionada
                var selectedSizeValue = selectedSize.val();
                var selectedSizeAvailability = availableQuantities.find(q => q.size === selectedSizeValue);
                selectedSize.attr('max', selectedSizeAvailability.quantity);

                console.log('Selected Quantity:', selectedQuantity);
                console.log('Available Quantity for selected size:', selectedSizeAvailability.quantity);

                if (!isNaN(selectedQuantity)) {
                    if (selectedQuantity <= selectedSizeAvailability.quantity) {
                        $.ajax({
                            url: '/Carrito/AddToCart',
                            method: 'POST',
                            data: {
                                productId: productId,
                                selectedSize: selectedSizeValue,
                                selectedQuantity: selectedQuantity
                            },
                            success: function (result) {
                                console.log(result);
                                if (result.success) {
                                    alert('Product added to cart successfully!');
                                } else {
                                    alert('Error adding product to cart. Please try again.');
                                }
                            },
                            error: function () {
                                alert('Error: Unable to add product to cart');
                            }
                        });
                    } else {
                        alert('Selected quantity exceeds available quantity. Please try again.');
                    }
                } else {
                    alert('Invalid quantity. Please try again.');
                }
            });

            // Agregar un manejador de eventos para cambiar el máximo de la cantidad al cambiar la talla
            $('select[name="selectedSize"]').on('change', function () {
                var selectedSizeValue = $(this).val();
                var selectedSizeAvailability = availableQuantities.find(q => q.size === selectedSizeValue);
                $(this).siblings('div').find('select[name="selectedQuantity"]').attr('max', selectedSizeAvailability.quantity);
            });
        });
    </script>
}